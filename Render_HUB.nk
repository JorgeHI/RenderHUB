set cut_paste_input [stack 0]
version 13.0 v1
push $cut_paste_input
Group {
 name Render_HUB
 onCreate "import re\n\ndef jhi_checkRootParentKnobs(node, root):\n    rootMode = root.knob(\"jhi_RenderHUB_mode\")\n    if not rootMode:\n        rhTab = nuke.Tab_Knob(\"jhi_config\",\"Script Config JHI\")\n        root.addKnob(rhTab)\n        rhMode = nuke.Boolean_Knob(\"jhi_RenderHUB_mode\",\"Render HUB Mode\")\n        root.addKnob(rhMode)\n    else:\n        rhMode = rootMode\n    if not rhMode.hasExpression():\n        rhMode.setExpression(\"\{0\}.ModeBool\".format(node.name()))\n\ndef jhi_Render_HUB_get_user_profiles(node):\n    pattern = re.compile(r\"jhi_profile_tab_(?P<profile>\[a-zA-Z0-9_]+)\")\n    profiles = \[]\n    for k in node.allKnobs():\n        res = pattern.match(k.name())\n        if res:\n            profiles.append(res.groupdict()\[\"profile\"])\n    return profiles\n    \n\ndef jhi_Render_HUB_refresh_profile_knob(node, knobName, profiles):\n    node\[knobName].setValues(profiles)\n    if node\[knobName].getValue() >= len(node\[knobName].values()):\n        node\[knobName].setValue(0)\n\n\ndef jhi_Render_HUB_refresh_profiles(node):\n    profiles = jhi_Render_HUB_get_user_profiles(node)\n    jhi_Render_HUB_refresh_profile_knob(node, \"jhi_user_profiles_list\", profiles)\n    jhi_Render_HUB_refresh_profile_knob(node, \"jhi_parentProfileName\", profiles)\n    jhi_Render_HUB_refresh_profile_knob(node, \"jhi_parentProfileName_selectParent\", profiles)\n    \n    \ndef jhi_Render_HUB_get_linked_nodes(node, profileName=None, nodeType=None):\n    profileNameFilter = \"parent.\{0\}.Render_HUB_\{1\}_\".format(node.name(), profileName) if profileName is not None else None\n    nodeList = \[]\n    with node.parent():\n        for n in nuke.allNodes():\n            # Filter node\n            if n.knob(\"jhi_name\") and n.knob(\"jhi_name\").value() == \"Render_HUB\":\n                continue\n            if nodeType is not None and n.Class() != nodeType:\n                continue\n            # Check linked knobs\n            nLink = False\n            for knob in n.allKnobs():\n                if knob.hasExpression():\n                    if profileNameFilter is not None:\n                        if knob.toScript().find(profileNameFilter) >= 0:\n                            nLink = True\n                    elif knob.toScript().find(\"Render_HUB\") >= 0:\n                        nLink = True\n                if nLink:\n                    nodeList.append(n)\n                    break\n    return nodeList\n    \n\ndef jhi_Render_HUB_refresh_selected_profile_Info(node):\n    profileName = node\[\"jhi_user_profiles_list\"].value()\n    profileTypeKnob = renderHub.knob(\"jhi_profile_knob_\{0\}_profileType\".format(profileName))\n    if profileTypeKnob is None:\n        renderHub\[\"jhi_selected_profile_type_preview\"].setValue(\"\")\n        renderHub\[\"jhi_profile_linked_nodes\"].setValue(\"\")\n        return\n    profileType = profileTypeKnob.value()\n    renderHub\[\"jhi_selected_profile_type_preview\"].setValue(profileType)\n    linkedNodes = jhi_Render_HUB_get_linked_nodes(renderHub, profileName=profileName)\n    linkedNodesMsg = \"\\n\".join(\[n.name() for n in linkedNodes])\n    renderHub\[\"jhi_profile_linked_nodes\"].setValue(linkedNodesMsg)\n\n\nthisNode = nuke.thisNode()\n# Knobs customization\nthisNode\[\"jhi_selected_profile_type_preview\"].setFlag(nuke.READ_ONLY)\nthisNode\[\"jhi_profile_linked_nodes\"].setFlag(nuke.READ_ONLY)\n# Try to check the root on creation. If the root can't be access -> skip the action\n# The root may be not accessible during Nuke's opening or script opening.\n# This is needed only for the first time a Render_HUB is created in a specific Nuke script\ntry:\n    root = nuke.root()\n    if thisNode.knob(\"useRoot\").value():\n        jhi_checkRootParentKnobs(thisNode, root)\nexcept:\n    pass\n"
 knobChanged "renderHub = nuke.thisNode()\nnodeName = renderHub.name()\nknob = nuke.thisKnob()\nknobName = knob.name()\nif knobName == \"Mode\":\n    knobValue = knob.value()\n    if knobValue == \"Auto-\$Gui\":\n       renderHub.knob(\"ModeBool\").setExpression(\"!\$gui\")\n    else:\n        if knobValue == \"Render\":\n            modeBool = True\n        else:\n            modeBool = False\n        renderHub.knob(\"ModeBool\").clearAnimated()\n        renderHub.knob(\"ModeBool\").setValue(modeBool)\nelif knobName == \"knobType\" or knob.name() == \"linkKnobAction\":\n    if renderHub\[\"knobType\"].value() in \[\"Profile\"] and renderHub\[\"linkKnobAction\"].value() == \"Parent\":\n        renderHub.knob(\"jhi_parentProfileName\").clearFlag(nuke.INVISIBLE)\n    else:\n        renderHub.knob(\"jhi_parentProfileName\").setFlag(nuke.INVISIBLE)\nelif knobName == \"selectParentType\":\n    if renderHub\[\"selectParentType\"].value() == \"Profile\":\n        renderHub.knob(\"jhi_parentProfileName_selectParent\").clearFlag(nuke.INVISIBLE)\n    else:\n        renderHub.knob(\"jhi_parentProfileName_selectParent\").setFlag(nuke.INVISIBLE)\nelif knobName == \"jhi_user_profiles_list\": # Refresh Profile Preview type and linked nodes\n    jhi_Render_HUB_refresh_selected_profile_Info(renderHub)\nelif knobName == \"useRoot\":\n    nodeExp = \"parent.\{0\}.ModeBool\".format(nodeName)\n    rootExp = \"parent.jhi_RenderHUB_mode\"\n    useRoot = renderHub.knob(\"useRoot\").value()\n    if useRoot:\n        root = nuke.root()\n        if renderHub.knob(\"useRoot\").value():\n            jhi_checkRootParentKnobs(renderHub, root)\n    with nuke.thisNode().parent():\n        for n in nuke.allNodes():\n            jhiName = n.knob(\"jhi_name\")\n            if jhiName:\n                if jhiName.value() == \"Render_HUB\":\n                    continue\n\n            for knob in n.allKnobs():\n                if knob.hasExpression():\n                    rawExp = knob.toScript()\n                    if rawExp.startswith(\"\{\\\"\"):\n                        exp = rawExp.partition(\"\\\"\")\[2].rpartition(\"\\\"\")\[0]\n                    else:\n                        exp = rawExp.partition(\"\{\")\[2].rpartition(\"\}\")\[0]\n                    if useRoot and knob.toScript().find(nodeExp) >= 0:\n                        knob.setExpression(exp.replace(nodeExp, rootExp))\n                    elif knob.toScript().find(rootExp) >= 0:\n                        knob.setExpression(exp.replace(rootExp, nodeExp))"
 tile_color 0xffaa2dff
 label "Mode: \[value this.Mode]"
 note_font_size 30
 selected true
 hide_input true
 addUserKnob {20 Management}
 addUserKnob {26 text l "" +STARTLINE T "<font color=\"grey\" face=\"Comic Sans MS\" size=\"10\">Mode: </font>"}
 addUserKnob {4 Mode l "" t "The current settings to apply in the Nuke script.\n - Work: Low profile setting to work in the script.\n - Render: High profile setting to render the script.\n - Auto \$Gui: Use the \$Gui option to set Work setting if Nuke have interfece active and Render setting if the script is rendering in batch modo (Farm) automatically." -STARTLINE M {Work Render "Auto-\$Gui" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 ModeBool -STARTLINE +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {26 selectActions l "" +STARTLINE T "<font color=\"grey\" face=\"Monaco\" size=\"8\">Select actions</font>"}
 addUserKnob {4 selectAllType l "Select all" t "Type to select the nodes of the script." M {Kronos Transform ScanlineRender Switch VectorBlur2 "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {22 selectAllExec l Select t "Select all the nodes in the script of the selected type." -STARTLINE T "nodeType = nuke.thisNode().knob(\"selectAllType\").value()\nwith nuke.thisNode().parent():\n    for n in nuke.allNodes(nodeType):\n        n.setSelected(True)"}
 addUserKnob {4 selectParentType l "Select Parent" t "Type to select the parent nodes." M {All Kronos Transform Switch VectorBlur2 Profile "" "" "" "" "" "" "" ""}}
 addUserKnob {4 jhi_parentProfileName_selectParent l "" t "The profile name to filter for the parent selection. Only nodes linked to the selected profile will be selected." -STARTLINE +INVISIBLE M {}}
 addUserKnob {22 selectParentExec l Select t "Select the nodes parent to the Render HUB of the selected type." -STARTLINE T "thisNode = nuke.thisNode()\nprofileName = None\nparentNodeType = thisNode\[\"selectParentType\"].value()\nparentNodeType = parentNodeType if parentNodeType != \"All\" else None\nif parentNodeType == \"Profile\":\n    parentNodeType = None\n    profileName = thisNode\[\"jhi_parentProfileName_selectParent\"].value()\nnodeList = jhi_Render_HUB_get_linked_nodes(thisNode, profileName=profileName, nodeType=parentNodeType)\n\[n.setSelected(True) for n in nodeList]"}
 addUserKnob {26 ""}
 addUserKnob {26 parentActions l "" +STARTLINE T "<font color=\"grey\" face=\"Monaco\" size=\"8\">Parent actions</font>"}
 addUserKnob {26 parentKnobText l "" +STARTLINE T "Link a Node"}
 addUserKnob {4 knobType l "" t "Knob or node configuration type to parent/unparent when executes this option.\nThe Auto mode will detect if the selected nodes are:\n- Switch -> link the switch knob\n- A node with a filter knob -> Link to the general profile.\n- If the node have motion blur knobs -> Link to the Motion Blur knobs from the general profile.\n- All other nodes -> Link the disable knob.\n\nIf you selected the Profile option you will be able to selected the user profile you want to link a parent all the knobs to the profile. Take in consideration that you can only link nodes of the same node type that the profile you select.\n" +STARTLINE M {Auto Disable Switch Filter "Motion Blur" Profile "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {4 linkKnobAction l "" t "Parent action to execute to the selected nodes." -STARTLINE M {Parent Unparent "" "" "" "" "" "" "" "" ""}}
 addUserKnob {4 jhi_parentProfileName l "" t "User node profile to parent the node." -STARTLINE +INVISIBLE M {}}
 addUserKnob {22 execParent l "Execute to Selected" t "Parent/Unparent the selected knob/configuration of the selected nodes to the Render HUB." -STARTLINE T "parentKnobsSR = \[\"conservative_shader_sampling\", \"transparency\", \"ztest_enabled\", \"filter\", \"antialiasing\",\n\"zblend_mode\", \"zblend_range\", \"projection_mode\", \"max_tessellation\", \"overscan\", \"ambient\", \n\"samples\", \"shutter\", \"shutteroffset\", \"shuttercustomoffset\", \"temporal_jitter\", \"spatial_jitter\", \n\"focal_jitter\", \"stochastic_samples\", \"motion_vectors_type\"]\nparentKnobsMB = \[\"motionblur\", \"shutter\", \"shutteroffset\", \"shuttercustomoffset\"]\n\ndef getExpresion(knobType, baseExp):\n    expression = \"!\{0\}\".format(baseExp)\n    knobName = \"disable\" if knobType == \"Disable\" else knobType\n    if knobName == \"Switch\":\n        knobName = \"which\"\n        expression = \"\{0\}? 0:1\".format(baseExp)\n    elif knobName == \"Filter\":\n        knobName = \"filter\"\n        expression = \"\{0\}? parent.\{nodeName\}.Render_HUB_ProfileTransform_Render.filter: parent.\{nodeName\}.Render_HUB_ProfileTransform_Work.filter\".replace(\"\{0\}\", baseExp)\n    elif knobName == \"Motion Blur\":\n        expression = \"\{0\}? parent.\{nodeName\}.Render_HUB_ProfileTransform_Render.\{knob\}: parent.\{nodeName\}.Render_HUB_ProfileTransform_Work.\{knob\}\".replace(\"\{0\}\", baseExp)\n    elif knobName == \"Profile\":\n        expression = \"\{0\}? parent.\{nodeName\}.Render_HUB_\{profile\}_Render.\{knob\} : parent.\{nodeName\}.Render_HUB_\{profile\}_Work.\{knob\}\".replace(\"\{0\}\", baseExp)\n    return knobName, expression\n    \ndef getNodeKnobTypes(node):\n    nodeType = node.Class()\n    nodeTypes = \[]\n    if nodeType == \"Switch\":\n        nodeTypes.append(\"Switch\")\n    elif nodeType in \[\"Transform\"]:\n        nodeTypes.append(\"Filter\")\n        nodeTypes.append(\"Motion Blur\")\n    else:\n        nodeTypes.append(\"Disable\")\n    return nodeTypes\n\nrenderHub = nuke.thisNode()\nif renderHub.knob(\"useRoot\").value():\n    baseExp = \"parent.jhi_RenderHUB_mode\"\nelse:\n    baseExp = \"parent.\{nodeName\}.ModeBool\"\n\naction = renderHub.knob(\"linkKnobAction\").value()\nprofileValue = renderHub.knob(\"jhi_parentProfileName\").value()\n\nknobNameRaw = renderHub.knob(\"knobType\").value()\nknobName, expression = getExpresion(knobNameRaw, baseExp)\nif knobName == \"Profile\" and action == \"Parent\":\n    # Get Profile type\n    profileNodeType = renderHub\[\"jhi_profile_knob_\{0\}_profileType\".format(profileValue)].value()\nelse:\n    profileNodeType = None\nwith nuke.thisNode().parent():\n    # Filter Nodes by type\n    if knobName == \"Profile\" and action == \"Parent\":\n        nodeList = \[n for n in nuke.selectedNodes() if n.Class() == profileNodeType]\n        nodeListBL = \[n for n in nuke.selectedNodes() if n.Class() != profileNodeType]\n    else:\n        nodeList = nuke.selectedNodes()\n        nodeListBL = \[]\n    for node in nodeList:\n        if node.fullName() == renderHub.fullName():\n            continue\n        knobList = \[]\n        if knobNameRaw == \"Auto\":\n            for knobType in getNodeKnobTypes(node):\n                knobList.append(getExpresion(knobType, baseExp))\n        else:\n            knobList.append(\[knobName, expression])\n        \n        for knobData in knobList:\n            if knobData\[0] == \"Profile\":\n                nodeKnobs = list(node.knobs().keys())\n                nodeKnobs = nodeKnobs\[:nodeKnobs.index(\"name\")]\n                for knob in nodeKnobs:\n                    if action == \"Parent\":\n                        node.knob(knob).setExpression(knobData\[1].format(nodeName=renderHub.name(), knob=knob, profile=profileValue))\n                    elif action == \"Unparent\":\n                        if node\[knob].Class() in \[\"Channel_Knob\", \"ChannelMask_Knob\"]:\n                            node\[knob].setExpression(\"\", channel=0)\n                            node\[knob].setExpression(\"\", channel=1)\n                            node\[knob].setExpression(\"\", channel=2)\n                            node\[knob].clearAnimated()\n                        else:\n                            node\[knob].clearAnimated()\n            elif knobData\[0] == \"Motion Blur\":\n                nodeKnobs = node.knobs().keys()\n                for knob in nodeKnobs:\n                    if knob not in parentKnobsMB:\n                        continue\n                    if action == \"Parent\":\n                        node.knob(knob).setExpression(knobData\[1].format(nodeName=renderHub.name(), knob=knob))\n                    elif action == \"Unparent\":\n                        node\[knob].clearAnimated()\n            else:\n                knob = node.knob(knobData\[0])\n                if knob is None:\n                    continue\n                if action == \"Parent\":\n                    knob.setExpression(knobData\[1].replace(\"\{nodeName\}\", renderHub.name()))\n                elif action == \"Unparent\":\n                    knob.clearAnimated()\n\n# refresh UI\njhi_Render_HUB_refresh_selected_profile_Info(renderHub)\n\nif nodeListBL:\n    msg = \"The some nodes were not linked because their node type is different to the node type of the selected profile (\{0\}):\\n\".format(profileNodeType)\n    for n in nodeListBL:\n        msg += \" -\{0\}:\{1\}\\n\".format(n.name(), n.Class())\n    nuke.message(msg)\n"}
 addUserKnob {6 useRoot l "Hide Links (Root Parent)" t "Use The project settings (Root) of the script to centralise the Render Mode and Hide don't create expresion links between the nodes." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 scriptCleaning_text l "" +STARTLINE T "<font color=\"grey\" face=\"Monaco\" size=\"8\">Script cleaning</font>"}
 addUserKnob {22 cleanScriptLinks l "Clean Script Links" t "Remove all the expression and custom knobs created by the Render HUB node in your script. When executed, the value of the current configuration will be set on the nodes, without expression. Selected the mode that you want to save before execute this.\n\nThis action could be useful if you wan to remove the Render HUB from your script and clean all the expression and data generated by it." T "renderHub = nuke.thisNode()\nnodeName = renderHub.name()\nuseRoot = renderHub.knob(\"useRoot\").value()\nif useRoot:\n    parentExp = \"jhi_RenderHUB_mode\"\nelse:\n    parentExp = nodeName\nif nuke.ask('You are going to set the current values in the mode \"\{0\}\" and clear all the link. This action can\\'t be undone. Do you want to continue?'.format(renderHub.knob(\"Mode\").value())):\n    with nuke.thisNode().parent():\n        for n in nuke.allNodes():\n            jhiName = n.knob(\"jhi_name\")\n            if jhiName:\n                if jhiName.value() == \"Render_HUB\":\n                    continue\n\n            for knob in n.allKnobs():\n                if knob.hasExpression():\n                    if knob.toScript().find(parentExp) >= 0:\n                        knobValue = knob.value()\n                        if knob.Class() in \[\"Channel_Knob\", \"ChannelMask_Knob\"]:\n                            knob.setExpression(\"\", channel=0)\n                            knob.setExpression(\"\", channel=1)\n                            knob.setExpression(\"\", channel=2)\n                            knob.clearAnimated()\n                        else:\n                            knob.clearAnimated()\n                        try:\n                            knob.setValue(knobValue)\n                        except:\n                            pass\n        root = nuke.root()\n        rootMode = root.knob(\"jhi_RenderHUB_mode\")\n        if rootMode:\n            root.removeKnob(rootMode)\n        rootTab = root.knob(\"jhi_config\")\n        if rootTab:\n            root.removeKnob(rootTab)\n    renderHub.knob(\"useRoot\").setValue(False)\n    \n                    " +STARTLINE}
 addUserKnob {20 General}
 addUserKnob {26 WorkingSettingsG l "Working Settings"}
 addUserKnob {41 filter_4 l filter T Render_HUB_ProfileTransform_Work.filter}
 addUserKnob {41 clamp -STARTLINE T Render_HUB_ProfileTransform_Work.clamp}
 addUserKnob {41 black_outside l "black outside" -STARTLINE T Render_HUB_ProfileTransform_Work.black_outside}
 addUserKnob {41 motionblur T Render_HUB_ProfileTransform_Work.motionblur}
 addUserKnob {41 shutter_4 l shutter T Render_HUB_ProfileTransform_Work.shutter}
 addUserKnob {41 shutteroffset_4 l "shutter offset" T Render_HUB_ProfileTransform_Work.shutteroffset}
 addUserKnob {41 shuttercustomoffset_2 l "" -STARTLINE T Render_HUB_ProfileTransform_Work.shuttercustomoffset}
 addUserKnob {26 RenderSettingsG l "Render Settings"}
 addUserKnob {41 filter_5 l filter T Render_HUB_ProfileTransform_Render.filter}
 addUserKnob {41 clamp_1 l clamp -STARTLINE T Render_HUB_ProfileTransform_Render.clamp}
 addUserKnob {41 black_outside_1 l "black outside" -STARTLINE T Render_HUB_ProfileTransform_Render.black_outside}
 addUserKnob {41 motionblur_1 l motionblur T Render_HUB_ProfileTransform_Render.motionblur}
 addUserKnob {41 shutter_5 l shutter T Render_HUB_ProfileTransform_Render.shutter}
 addUserKnob {41 shutteroffset_5 l "shutter offset" T Render_HUB_ProfileTransform_Render.shutteroffset}
 addUserKnob {41 shuttercustomoffset_3 l "" -STARTLINE T Render_HUB_ProfileTransform_Render.shuttercustomoffset}
 addUserKnob {20 jhi_profilesConfig l Profiles t "Advance configuration of the node profiles"}
 addUserKnob {26 profiles_label l "" +STARTLINE T "<font color=\"grey\" face=\"Monaco\" size=\"10\">Profiles</font>"}
 addUserKnob {26 jhi_profiles_section_creation l "Profiles creation"}
 addUserKnob {22 jhi_addProfile_type l "Add Selected Node Type" t "Adds the selected node type to the list of profiles types to create. This can be use like a shortcut to avoid write the internal nuke node type manually in the list of types." T "def jhi_Render_HUB_add_selected_node_type(node):\n    with node.parent():\n        selectedNode = nuke.selectedNode()\n    if not selectedNode:\n        nuke.message(\"Selected a Node to get the node type from it.\")\n        return\n    nodeType = selectedNode.Class()\n    currentNodeTypes = node\[\"addProfile_type\"].values()\n    if nodeType not in currentNodeTypes:\n        currentNodeTypes.append(nodeType)\n        node\[\"addProfile_type\"].setValues(currentNodeTypes)\n        \nthisNode = nuke.thisNode()\njhi_Render_HUB_add_selected_node_type(thisNode)\n" +STARTLINE}
 addUserKnob {1 addProfile_name l "Profile Name" t "The name of the profile to create. It have to be unique insithe the Render_HUB node. Use only "}
 addUserKnob {85 addProfile_type l "" t "Profile Type (Nuke Node Type)" -STARTLINE M {ScanlineRender ScanlineRender2 Merge2 Transform}}
 addUserKnob {22 jhi_addProfile l + -STARTLINE T "thisNode = nuke.thisNode()\n\ndef insertKnobs(node, knobNameRef, knobList):\n    \"\"\"Insert a list of given knobs in order after a given knob name.\n\n    Args:\n        node (:obj:`nuke.Node`): The node where the knobs have to be added.\n        knobNameRef (str): The name of the knob of reference.\n\t\t\t\t\t\tThe new knobs will be inserted after it.\n        knobList (list of :obj:`nuke.Knob`): The list of knobs to add.\n        \n\n    \"\"\"\n    knobBackupList = \[]\n    makeBackup = False\n    # Save the knobs that are after the reference knob\n    tabKnob = None\n    for k in node.allKnobs():\n        if not makeBackup and k.Class() == \"Tab_Knob\":\n            tabKnob = k\n        if makeBackup:\n            knobBackupList.append(k)\n        elif k.name() == knobNameRef:\n            makeBackup = True\n    # Remove the knobs\n    for k in knobBackupList:\n        node.removeKnob(k)\n    # Add the new knobs\n    for newKnob in knobList:\n        node.addKnob(newKnob)\n    # Restore the backup of the removed knobs now.\n    for k in knobBackupList:\n        node.addKnob(k)\n    # Restore the current tab like the active one. If you don't active the tab in someway, \n    # the properties panel will open the last knob because of the remove and restore process\n    tabKnob.setFlag(0)\n    \ndef jhi_renderHub_addLinkKnobs(node, newKnobList, formatedProfilePrefix, profileNodeType):\n    newKnobList.append(nuke.BeginTabGroup_Knob())\n    newKnobList.append(nuke.Tab_Knob(formatedProfilePrefix + profileNodeType, profileNodeType))\n    for k in node.allKnobs():\n        if k.Class() == \"Tab_Knob\" and k.label() == \"Node\":\n            break\n        elif k.Class() == \"Tab_Knob\" and k.name():\n            link_knob = nuke.Tab_Knob(formatedProfilePrefix + node.name() + k.name(), k.name(), nuke.TABBEGINCLOSEDGROUP)\n        elif k.Class() == \"Tab_Knob\" and k.label():\n            link_knob = nuke.Tab_Knob(\"\{0\}_\{1\}\".format(formatedProfilePrefix + node.name(), k.label()), k.label())\n        elif k.Class() == \"Tab_Knob\" and not k.name():\n            link_knob = nuke.Tab_Knob('', None, nuke.TABENDGROUP)\n        elif k.Class() == \"Text_Knob\":\n            link_knob = nuke.Text_Knob('', None)\n        elif not k.name():\n            continue\n        else:\n            link_knob = nuke.Link_Knob('\{0\}_link'.format(formatedProfilePrefix + node.name() + k.name()), k.name())\n            link_knob.setLink('\{\}.\{\}'.format(node.fullName(), k.name()))\n        newKnobList.append(link_knob)\n    newKnobList.append(nuke.EndTabGroup_Knob())\n    return newKnobList\n    \ndef jhi_renderHub_create_reset_profile_knob(knobName, nodeName):\n    pyKnob = nuke.PyScript_Knob(\n        knobName, \n        \"Reset Profile to Default\",\n        \"thisNode = nuke.thisNode()\\n\\nwith thisNode:\\n    profileNode = nuke.toNode(\\\"\{0\}\\\")\\n    profileNode.resetKnobsToDefault()\".format(nodeName)\n    )\n    return pyKnob\n\ndef jhi_renderHub_create_profile_(node):\n    profileName = node\[\"addProfile_name\"].value()\n    if not profileName:\n        nuke.message(\"A Profile name is required.\")\n        return\n    res = re.match(r\"^(?P<profile>\[a-zA-Z0-9_]+)\$\", profileName)\n    if not res:\n        nuke.message(\"The profile name must contains letters, numbers and underscore characters only.\")\n        return\n    formatedProfileName = \"jhi_profile_tab_\{0\}\".format(profileName)\n    if node.knob(formatedProfileName) is not None:\n        nuke.message(\"A profile with this name already exists.\")\n        return\n    profileNodeType = node\[\"addProfile_type\"].value()\n    formatedProfilePrefix = \"jhi_profile_knob_\{0\}_\".format(profileName)\n    with node:\n        # Clean selection\n        \[n.setSelected(False) for n in nuke.selectedNodes()]\n        # create work node\n        workNode = nuke.createNode(profileNodeType, inpanel=False)\n        workNode.setName(\"Render_HUB_\" + profileName + \"_Work\")\n        workProfileName = workNode.name()\n        workNode.setSelected(False)\n        # create work node\n        renderNode = nuke.createNode(profileNodeType, inpanel=False)\n        renderNode.setName(\"Render_HUB_\" + profileName + \"_Render\")\n        renderProfileName = renderNode.name()\n    \n    # Find the knob reference to insert the new profile\n    knobsNames = \[n.name() for n in node.allKnobs()]\n    knobNameRefIndex = knobsNames.index(\"jhi_help\") - 1\n    knobNameRef = knobsNames\[knobNameRefIndex]\n    \n    # Link the knobs\n    newKnobList = \[]\n    newKnobList.append(nuke.Tab_Knob(formatedProfileName, profileName))\n    # Profile Data\n    profileTypeKnob = nuke.Text_Knob(formatedProfilePrefix + \"profileType\", \"Profile Type\", profileNodeType)\n    profileTypeKnob.setFlag(nuke.INVISIBLE)\n    newKnobList.append(profileTypeKnob)\n    # Working tab group\n    newKnobList.append(nuke.Text_Knob(formatedProfilePrefix + \"workLabel\", \"\", '<font color=\"grey\" face=\"Monaco\" size=\"10\">Work Config</font>'))\n    jhi_renderHub_addLinkKnobs(workNode, newKnobList, formatedProfilePrefix, profileNodeType)\n    newKnobList.append(jhi_renderHub_create_reset_profile_knob(formatedProfilePrefix + \"resetWork\", workNode.name()))\n    # Rendering tab group\n    newKnobList.append(nuke.Text_Knob(formatedProfilePrefix + \"renderLabel\", \"\", '<font color=\"grey\" face=\"Monaco\" size=\"10\">Render Config</font>'))\n    jhi_renderHub_addLinkKnobs(renderNode, newKnobList, formatedProfilePrefix, profileNodeType)\n    newKnobList.append(jhi_renderHub_create_reset_profile_knob(formatedProfilePrefix + \"resetRender\", renderNode.name()))\n    # End profile knob reference point\n    endProfileKnob = nuke.Text_Knob(formatedProfilePrefix + \"endProfile\", \"TrackPoint\", \"End Profile\")\n    endProfileKnob.setFlag(nuke.INVISIBLE)\n    newKnobList.append(endProfileKnob)\n    insertKnobs(node, knobNameRef, newKnobList)\n    # Refresh the profiles list\n    jhi_Render_HUB_refresh_profiles(node)\n    \n\njhi_renderHub_create_profile_(thisNode)"}
 addUserKnob {26 jhi_profiles_section_management l "Profiles Management"}
 addUserKnob {4 jhi_user_profiles_list l "User Profiles" t "The list of profiles created by the user in this node." M {}}
 addUserKnob {1 jhi_selected_profile_type_preview l "Profile Type" t "The node type of the selected profile" -STARTLINE}
 addUserKnob {22 jhi_profile_remove_button l "Remove Profile" t "Removes the selected profile from the Node" -STARTLINE T "def jhi_render_hub_remove_profile(node, profileName):\n    nodePrefix = \"Render_HUB_\{0\}\".format(profileName)\n    formatedProfilePrefix = \"jhi_profile_knob_\{0\}_\".format(profileName)\n    profileTabName = \"jhi_profile_tab_\{0\}\".format(profileName)\n    profileEnd = formatedProfilePrefix + \"endProfile\"\n    # Remove knobs\n    profileFound = False\n    for k in node.allKnobs():\n        if profileFound:\n            node.removeKnob(k)\n        if k.name() == profileTabName:\n            profileFound = True\n        elif k.name() == profileEnd:\n            profileFound = False\n    # Remove internal Nodes\n    with node:\n        workNode = nuke.toNode(nodePrefix + \"_Work\")\n        renderNode = nuke.toNode(nodePrefix + \"_Render\")\n        nuke.delete(workNode)\n        nuke.delete(renderNode)\n    # Remove profile tab\n    node.removeKnob(node\[profileTabName])\n    # Refresh the profiles list\n    jhi_Render_HUB_refresh_profiles(node)\n\nthisNode = nuke.thisNode()\nprofileName = thisNode\[\"jhi_user_profiles_list\"].value()\nlinkednodes = jhi_Render_HUB_get_linked_nodes(thisNode, profileName=profileName)\nremoveProfile = False\nif thisNode.knob(\"jhi_profile_tab_\{0\}\".format(profileName)) is None:\n    nuke.message(\"Pls selected a valid profile name from the User Profiles list.\")\nelif linkednodes:\n    if nuke.ask(\"The profile '\{0\}' have some nodes linked to it. It's not recomended \" \\\n        \"to remove profiles that currently in use. Are you sure you want to continue?\".format(profileName)):\n        removeProfile = True\nelif nuke.ask(\"Are you sure you want to remove the Render HUB profle '\{0\}'? \" \\\n        \"You will lost all the config from the profile.\".format(profileName)):\n    removeProfile = True\nif removeProfile:\n    jhi_render_hub_remove_profile(thisNode, profileName)\n"}
 addUserKnob {43 jhi_profile_linked_nodes l "Linked Nodes"}
 addUserKnob {20 jhi_help l Help t "Information about the Node."}
 addUserKnob {26 jhi_info l "" +STARTLINE T "Render HUB v0.3.0 - Node develop by Jorge Hernandez (JorgeHI)"}
 addUserKnob {26 jhi_contact l "" +STARTLINE T "\n<font color=\"grey\">For asistance or bug report contact: info@jorgehi.com\n</font>"}
 addUserKnob {22 jhi_doc l Documentation T "nukescripts.start(\"https://github.com/JorgeHI/RenderHUB\")" +STARTLINE}
 addUserKnob {22 jhi_nukepedia l Nukepedia -STARTLINE T "nukescripts.start(\"https://www.nukepedia.com/gizmos/other/render_hub\")"}
 addUserKnob {22 jhi_report_problem l "Report Problem" -STARTLINE T "nukescripts.start(\"https://github.com/JorgeHI/RenderHUB/issues/new?assignees=JorgeHI&labels=bug&projects=&template=bug_report.md&title=\")"}
 addUserKnob {20 jhi_config l config +INVISIBLE}
 addUserKnob {1 jhi_name}
 jhi_name Render_HUB
 addUserKnob {1 jhi_version}
 jhi_version 0.3.0
}
 Input {
  inputs 0
  name Input1
  xpos -240
  ypos 200
 }
 Output {
  name Output1
  xpos -240
  ypos 350
 }
 Transform {
  inputs 0
  name Render_HUB_ProfileTransform_Render
  xpos 120
  ypos 340
 }
 Transform {
  inputs 0
  name Render_HUB_ProfileTransform_Work
  xpos -70
  ypos 340
 }
end_group
